<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhengHe</title>
  <icon>https://zhenghe-md.github.io/blog/icon.png</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://zhenghe-md.github.io/blog/"/>
  <updated>2022-10-09T13:16:52.297Z</updated>
  <id>https://zhenghe-md.github.io/blog/</id>
  
  <author>
    <name>ZhengHe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>猫和女儿教会我的道理</title>
    <link href="https://zhenghe-md.github.io/blog/2022/10/09/relationship/"/>
    <id>https://zhenghe-md.github.io/blog/2022/10/09/relationship/</id>
    <published>2022-10-09T17:06:43.000Z</published>
    <updated>2022-10-09T13:16:52.297Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;没有屏蔽我朋友圈的人估计都知道，我有一只帅气的猫叫郑小钱，一个可爱的女儿叫郑天晴。小钱已经快 5 岁了，天晴刚刚 1 岁 3 个月，她们和我 (爸爸)、我媳妇 (妈妈) 以及我妈妈 (奶奶)，4 人 1 猫生活在北京租住的一套小房子里。&lt;/p&gt;
&lt;p&gt;都说养猫是养娃的演习，这话颇有道理。二者的确有很多相似的地方，比如我们会忍不住给她们买玩具，花时间陪她们玩耍，给她们准备饭菜与零食，管她们拉屎撒尿。最有意思的也是我和媳妇经常讨论的一点就是「她们跟谁关系最好。」她们不懂任何人情事故，却好像知道所有的人情世故。&lt;/p&gt;
&lt;p&gt;在小钱心中从亲到疏排序依次是爸爸、妈妈、天晴、奶奶。小钱刚被接到家里，妈妈就出了趟三天的远门参加同学的婚宴。于是小钱来的前三天，都是我陪着玩、抱着睡、帮着铲屎尿、换猫砂。由于小钱没有对妈妈表现出足够的依赖，妈妈偶尔会有些懊恼。平时妈妈忙着做饭做菜，很多照顾小钱的事情就落到了爸爸身上。似乎这对妈妈来说也不是件坏事，不耽误撸猫的同时能少做一些事，但久而久之，小钱跟我的关系相对地变得越来越好。天晴很喜欢小钱，经常满屋子追着它，小钱虽然有些嫌弃，但只要下手不太重，小钱也就任由天晴摆布，算是大让小。奶奶则很讨厌小钱，也不承认这个「孙子」，因为小钱经常不知天高地厚地跳到洗菜池子上，睡在奶奶房间的凳子上，还总喜欢喝拖把桶、马桶里的脏水。奶奶唯一需要小钱的就是天晴哭闹的时候，实在没别的办法就会拍着天晴说「你看！猫咪在哪里？」期望能转移她的注意力。&lt;/p&gt;
&lt;p&gt;在天晴心中从亲到疏排序则是妈妈、奶奶、爸爸、小钱。天晴虽然只有 1 岁多，但跟妈妈一起的时间已经两年有余，出生后吃母乳足足吃了十个月，每天都是妈妈哄着、陪着睡觉。产假结束后，周一到周五带天晴的重担就来到了奶奶身上，奶奶从早上八点开始一直陪护郑天晴到妈妈晚上七点下班回家。为了天晴的健康成长，每天奶奶都需要带她到公园游玩，亲近自然的同时认识其它小朋友。中午又得着急忙慌地赶在天晴睡着之前喂完午饭，然后哄着睡午觉，清理屎尿更不必说。爸爸在周中的出场机会并不多，下班回家时天晴也已经进入梦乡，一般只是在周末会与妈妈一起换一部分奶奶的班。&lt;/p&gt;
&lt;p&gt;其实，小钱和天晴衡量亲疏的标准是一样的，也非常简单，那就是我们「陪她们的时间长短」。陪的时间越长，她们和我们关系就越紧密；陪的时间越短，她们和我们的关系就越疏远。这种亲疏关系与血缘无关，她们不会因为我们有共同的祖先而多偏袒一分；这种亲疏关系与利益无关，她们不会因为我们给递过好吃的食物、送过花哨的玩具而多倾斜一毫。要与她们建立更深厚的关系，没有任何捷径可走，只能付出我们的时间，而时间恰恰是每个人最稀缺的、无法通过其它手段攫取的、对所有人都公平的一种资源。这种设定很巧妙，在建立亲密关系这件事上，众生平等。&lt;/p&gt;
&lt;p&gt;确实存在人脉广博的人，只要一个电话，什么事都能办成。但他们之间的关系是否是亲密关系仍需商榷。我们会在制定出游计划的时候想到他们吗？高兴或伤心的时候与他们通话吗？发现有意思的实物和他们分享吗？来到他们所生活的城市，即便时间紧迫仍然要安排一场聚会吗？&lt;/p&gt;
&lt;p&gt;在《小王子》里，狐狸曾对小王子说「对我来说，你只是一个小男孩，就像其他成千上万小男孩一样没什么两样，我不需要你，你也不需要我。对你来说，我也只是一只小狐狸，和其他成千上万的狐狸没有什么不同。但是，如果你驯养了我，我们就会彼此需要，对我来说，你就是我世界里独一无二的了，我对你来说，也是你世界里的唯一了。」而驯养的方式，就是小王子每天都能在下午四点钟来到狐狸身边。&lt;/p&gt;
&lt;p&gt;想明白了这些，就不难去做一个有人情味的人了。国庆结束后，奶奶和天晴留在了老家，爸爸和妈妈来到了北京，我们偶尔会视频。天晴虽然不会说话，但一看到爸爸、妈妈总是会露出天真烂漫的笑容。天晴出生后，由于爷爷还没退休，一直没有和天晴建立感情，我想这对爷爷来说是个大好的机会。&lt;/p&gt;

    
    </summary>
    
    
    
      <category term="思考" scheme="https://zhenghe-md.github.io/blog/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>面试官毁掉技术面试的三大法宝</title>
    <link href="https://zhenghe-md.github.io/blog/2022/09/29/my-takes-on-interviews/"/>
    <id>https://zhenghe-md.github.io/blog/2022/09/29/my-takes-on-interviews/</id>
    <published>2022-09-29T08:36:28.000Z</published>
    <updated>2022-10-09T13:16:52.297Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在伴鱼的三年，我作为面试官参与超过 100 场面试，遇到许多风格各异的候选人；最近的两个月里，我也作为候选人参与将近 30 轮面试，见过不少形形色色的面试官。在参与这些面试的过程中，我心中逐渐累积了一些对面试的看法，本文我想站在面试官的角度，谈一谈面试官毁掉技术面试的三大法宝。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从 MapReduce 到 SQL</title>
    <link href="https://zhenghe-md.github.io/blog/2022/08/06/map-reduce-from-scratch/"/>
    <id>https://zhenghe-md.github.io/blog/2022/08/06/map-reduce-from-scratch/</id>
    <published>2022-08-06T22:16:08.000Z</published>
    <updated>2022-10-09T13:16:52.293Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在最近的工作中，为了做数据分析，我开始写一些复杂的 HiveSQL。每次执行 HiveSQL 时，都会看到 Map/Reduce jobs 被调度、执行，直到最后展示出数据。渐渐地我心中多了两个疑问：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;MapReduce 引擎如何工作？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL 是如何被翻译成 MapReduce job 的？&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了解决这两个疑问，我用比较熟悉的 Go 语言实现了一个玩具版本的 MapReduce 引擎，然后基于此实现基本的 select，join。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文相关的源码放在仓库 &lt;a href=&quot;https://github.com/ZhengHe-MD/pset/tree/main/map-reduce/go/mapreduce&quot;&gt;ZhengHe-MD/pset · GitHub&lt;/a&gt; 中，欢迎查阅。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>一次实验、两种错误、三个直觉</title>
    <link href="https://zhenghe-md.github.io/blog/2022/07/04/A-B-Testing/"/>
    <id>https://zhenghe-md.github.io/blog/2022/07/04/A-B-Testing/</id>
    <published>2022-07-04T19:50:21.000Z</published>
    <updated>2022-10-09T13:16:52.205Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近，我们在公司内部做了一些 &lt;a href=&quot;https://www.goodreads.com/book/show/31625067-hacking-growth&quot;&gt;Hacking Growth&lt;/a&gt; 方向的探索，我们团队俨然成了增长团队，从用户增长、转化的各个环节上尝试不同的策略，拉新、激活、留存、促活、商业化，整个核心流程是一个大漏斗，不同的阶段和渠道又可以拆分成不同的小漏斗，哪个环节损失大就优化哪个。但无论做何种尝试，都绕不开 A/B 测试。&lt;/p&gt;

&lt;p&gt;对于一名工程师，我认为 A/B 测试有两个角度值得了解：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;如何搭建一个 A/B 测试平台，支持流量分层、转发，让不同实验共享流量；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何动手做一个 A/B 测试，并能合理地解读统计结论，指导后续生产实践；&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于前者，业界已经有许多最佳实践，比如之前引我入门的这篇论文 &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/36500.pdf&quot;&gt;Overlapping Experiment Infrastructure&lt;/a&gt;，以及伴鱼的小伙伴们写的两篇实践总结 [&lt;a href=&quot;https://xie.infoq.cn/article/d62fed8fdfdf87ec1d9779f79&quot;&gt;1&lt;/a&gt;]、[&lt;a href=&quot;https://tech.ipalfish.com/blog/2020/06/25/ab_test_evolu/&quot;&gt;2&lt;/a&gt;]；本文想聊的是后者。&lt;/p&gt;

&lt;h2 id=&quot;一次实验&quot;&gt;1. 一次实验&lt;/h2&gt;
&lt;p&gt;在互联网场景中，无论是拉新、激活、留存、促活还是商业化，所有的 A/B 测试都可以用一个公式来概括：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 方案 A 的转化率比方案 B 的更高吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了后续的讨论能更具体一些，我们先看一个实际的测试场景：假设我们需要给某个用户群体拨打 AI 电话，之前一直在使用家琪的声音拨打电话，现在供应商新推出了小红的声音，我们想知道小红的声音是否有更好的表现。于是，在其它条件相同的情况下，我们分别用小红和家琪的声音给若干用户打了电话，这次的实验现象如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;实验现象&lt;/th&gt;
&lt;th&gt;小红&lt;/th&gt;
&lt;th&gt;家琪&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;接通&lt;/td&gt;
&lt;td&gt;3469&lt;/td&gt;
&lt;td&gt;2798&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;意向&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;意向率&lt;/td&gt;
&lt;td&gt;2.83%&lt;/td&gt;
&lt;td&gt;1.54%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;套用刚才的公式，这个 A/B 测试就是：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>捋一捋 Accuracy 与 Precision 间的区别和联系</title>
    <link href="https://zhenghe-md.github.io/blog/2022/05/23/accuracy-and-precision/"/>
    <id>https://zhenghe-md.github.io/blog/2022/05/23/accuracy-and-precision/</id>
    <published>2022-05-23T07:39:41.000Z</published>
    <updated>2022-10-09T13:16:52.261Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Accuracy 和 Precision 是在科学技术领域中经常出现的两个概念，本文将通过一张图来捋一捋二者之间的区别与联系。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="一图中的" scheme="https://zhenghe-md.github.io/blog/tags/%E4%B8%80%E5%9B%BE%E4%B8%AD%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>我明明是福建人，为什么别人以为我是胡建人？</title>
    <link href="https://zhenghe-md.github.io/blog/2022/05/15/x-and-y-sounds-in-language/"/>
    <id>https://zhenghe-md.github.io/blog/2022/05/15/x-and-y-sounds-in-language/</id>
    <published>2022-05-15T21:19:18.000Z</published>
    <updated>2022-10-09T13:16:52.317Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在和不同地区的人聊天时，我们常常会有疑惑：为什么有些人说话时分不清 x 和 y？这里的 x 和 y 可能是拼音中的 f 和 h，l 和 n，l 和 r，z 和 zh，ang 和 an。比如，我明明是福建人，为什么别人以为我是胡建人？在最近刚刚读完的一本书《Fluent Forever》中，有两张图片正好能解释这个问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="一图中的" scheme="https://zhenghe-md.github.io/blog/tags/%E4%B8%80%E5%9B%BE%E4%B8%AD%E7%9A%84/"/>
    
      <category term="languages" scheme="https://zhenghe-md.github.io/blog/tags/languages/"/>
    
  </entry>
  
  <entry>
    <title>中小型 Go 语言项目应该如何布局？</title>
    <link href="https://zhenghe-md.github.io/blog/2022/04/13/go-project-layout/"/>
    <id>https://zhenghe-md.github.io/blog/2022/04/13/go-project-layout/</id>
    <published>2022-04-13T11:18:50.000Z</published>
    <updated>2022-10-09T13:16:52.289Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;每个工程师来到新环境，大概率需要从维护老项目开始切入，逐渐熟悉公司的技术栈和效率工具。这时候，老项目的一些习惯，如命名、布局、错误处理等等，不论好坏，都会不自觉地影响新人，形成路径依赖。在这个过程中，如果没有人主动去思考为什么，这些习惯也将被无理由地继承下去。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Go" scheme="https://zhenghe-md.github.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>复利的隐喻</title>
    <link href="https://zhenghe-md.github.io/blog/2022/02/26/compound-interest-in-life/"/>
    <id>https://zhenghe-md.github.io/blog/2022/02/26/compound-interest-in-life/</id>
    <published>2022-02-26T21:05:50.000Z</published>
    <updated>2022-10-09T13:16:52.269Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;💡 人们常常高估自己一年能成就之事，而低估自己十年能成就之事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管我的博客中绝大多数内容都与计算机相关，但实际上我还有另一个身份：经济学学士。在对外经贸大学度过的四年，是我对人生的认识井喷的四年。毕业之后选择计算机，并不是因为我厌恶经济学。相反，在学习经济学的过程中建立起的心智模式，一直对我的学习和实践产生着指导性作用。&lt;/p&gt;
&lt;p&gt;在货币银行学中，有一个与金钱的时间价值紧密相关的概念：&lt;strong&gt;复利&lt;/strong&gt;，即本金产生的利息会在下一个计息周期成为本金的一部分，用大白话来描述就是「利滚利」。用经济学的概念去解释生活现象，是我很喜欢做的一种心理实验，甚至有时候我会相信任何一个经济学的概念都对应生活中的某个隐喻。在我看来，&lt;strong&gt;复利的隐喻就是坚持&lt;/strong&gt;。在过去的经历中，坚持在许多层面给到了我奖励，而且这些奖励会随着时间的推移自我增强，就像利息追加进入本金。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="思考" scheme="https://zhenghe-md.github.io/blog/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>从头开始实现 RNN</title>
    <link href="https://zhenghe-md.github.io/blog/2022/02/20/rnn/"/>
    <id>https://zhenghe-md.github.io/blog/2022/02/20/rnn/</id>
    <published>2022-02-20T15:03:20.000Z</published>
    <updated>2022-10-09T13:16:52.301Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;What I cannot create, I do not understand. -- Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Andrej Karpathy 在 2015 年发表了题为 &lt;a href=&quot;https://karpathy.github.io/2015/05/21/rnn-effectiveness/&quot;&gt;The Unreasonable Effectiveness of Recurrent Neural Networks&lt;/a&gt; 的博客，并配套开源了其中实验所用的 &lt;a href=&quot;https://github.com/karpathy/char-rnn&quot;&gt;char-rnn 代码仓库&lt;/a&gt;，以及用 numpy 手写的 &lt;a href=&quot;https://gist.github.com/karpathy/d4dee566867f8291f086&quot;&gt;gist: min-char-rnn&lt;/a&gt;，阅读过后受益良多。于是最近花了一些时间做了下面这些事情：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;逐行理解 min-char-rnn，即 vanilla RNN&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现 N 层 vanilla RNN&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现 LSTM (Long Short-Term Memory) RNN&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;探索 RNN 的可能性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paul Graham generator&lt;/li&gt;
&lt;li&gt;三国演义&lt;/li&gt;
&lt;li&gt;老友记&lt;/li&gt;
&lt;li&gt;Kubernetes 源码&lt;/li&gt;
&lt;li&gt;超级丹的技战术&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整个探索过程对我而言充满了趣味和挑战，并且在实践中令人激动地首次使用微积分的知识。尽管这只是深度学习的冰山一角，但足以让一名主营业务为服务端开发的软件工程师感到激动不已，于是便有了这篇博客，将这个过程记录下来。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>翻译能有多快？在 Mac 上实现一键翻译</title>
    <link href="https://zhenghe-md.github.io/blog/2022/02/07/quick-translate/"/>
    <id>https://zhenghe-md.github.io/blog/2022/02/07/quick-translate/</id>
    <published>2022-02-07T20:44:52.000Z</published>
    <updated>2022-10-09T13:16:52.297Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;因为平时需要阅读大量的英文资料，翻译对我来说是一个高频需求，但我一直没能找到一个足够趁手的工具。对于一个理想的翻译工具，我有三点期望：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;翻译准确：翻译的结果与原文贴合不显得尴尬&lt;/li&gt;
&lt;li&gt;触发简单：复制到剪贴板后快速触发翻译指令&lt;/li&gt;
&lt;li&gt;响应迅速：发起翻译请求到获得结果小于一秒&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从头开始构建一个 Pascal 的解释器</title>
    <link href="https://zhenghe-md.github.io/blog/2022/01/03/On-Let-s-Build-A-Simple-Interpreter/"/>
    <id>https://zhenghe-md.github.io/blog/2022/01/03/On-Let-s-Build-A-Simple-Interpreter/</id>
    <published>2022-01-03T19:43:37.000Z</published>
    <updated>2022-10-09T13:16:52.249Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前阵子无意中发现了一个系列教程：「&lt;a href=&quot;https://github.com/rspivak/lsbasi&quot;&gt;Let&#39;s Build A Simple Interpreter&lt;/a&gt; 」，简称 lsbasi。本来只是随便翻翻，但刚看完 Part-1 就发现作者 &lt;a href=&quot;https://ruslanspivak.com/pages/about/&quot;&gt;Ruslan Spivak&lt;/a&gt; 不仅是一个出色的软件工程师，文笔也相当不错，更难得的是他对学习这件事本身有着很深入的理解，这些见解甚至反馈到了这套教程的设计上。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="笨学指南" scheme="https://zhenghe-md.github.io/blog/tags/%E7%AC%A8%E5%AD%A6%E6%8C%87%E5%8D%97/"/>
    
      <category term="tutorial" scheme="https://zhenghe-md.github.io/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>学习本身是一件值得思考的事情</title>
    <link href="https://zhenghe-md.github.io/blog/2021/11/28/Make-It-Stick-Digest/"/>
    <id>https://zhenghe-md.github.io/blog/2021/11/28/Make-It-Stick-Digest/</id>
    <published>2021-11-28T20:54:58.000Z</published>
    <updated>2022-10-09T13:16:52.249Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，我的朋友「肚子」向我推荐了 &lt;a href=&quot;https://www.goodreads.com/book/show/18770267-make-it-stick&quot;&gt;Make It Stick: The Science of Successful Learning&lt;/a&gt; 这本书 (以下简称 MIS)，读毕感觉相见恨晚。该书的讨论主题是学习这件事情本身，即研究人类学习的特点，找到适合人类的高效学习策略。如果用一句话向其它朋友推荐这本书，我想这句话一定是：&lt;strong&gt;学习本身是一件值得思考的事情&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="笨学指南" scheme="https://zhenghe-md.github.io/blog/tags/%E7%AC%A8%E5%AD%A6%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>对话系统-101</title>
    <link href="https://zhenghe-md.github.io/blog/2021/07/24/dialogue-system-research/"/>
    <id>https://zhenghe-md.github.io/blog/2021/07/24/dialogue-system-research/</id>
    <published>2021-07-24T09:37:30.000Z</published>
    <updated>2022-10-09T13:16:52.285Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今年 6 月底，由于工作需要，花了两周时间调研对话系统，并在公司内部做了一次调研报告。本文意在将此报告整理成文字版，算是对这段时间付出的一个交代。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/blog/tags/system-design/"/>
    
  </entry>
  
  <entry>
    <title>「Born a Crime」读后小记</title>
    <link href="https://zhenghe-md.github.io/blog/2021/05/23/born-a-crime/"/>
    <id>https://zhenghe-md.github.io/blog/2021/05/23/born-a-crime/</id>
    <published>2021-05-23T09:04:37.000Z</published>
    <updated>2022-10-09T13:16:52.269Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;因为之前在 Youtube 和 B 站上零星地看了一些 Trevor Noah 的 stand-up 和 Daily Show，加上最近在 Palfish App 上与来自南非的老师学英语，我在大约四月中旬决定读一读「Born a Crime」这本书，书的内容本来并不多，但个人时间安排原因使得这个过程变得很长，直到昨天终于读完。&lt;/p&gt;
    
    </summary>
    
    
      <category term="readings" scheme="https://zhenghe-md.github.io/blog/categories/readings/"/>
    
    
  </entry>
  
  <entry>
    <title>代码搜索引擎：基础篇</title>
    <link href="https://zhenghe-md.github.io/blog/2021/05/09/search-engine-for-codes-fundamentals/"/>
    <id>https://zhenghe-md.github.io/blog/2021/05/09/search-engine-for-codes-fundamentals/</id>
    <published>2021-05-09T10:19:17.000Z</published>
    <updated>2022-10-09T13:16:52.301Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&quot;Google 内部曾对工程师做一次 &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43835.pdf&quot;&gt;调研&lt;/a&gt;，发现平均每位工程师每天会进行 5.3 次代码搜索会话 (session)，执行 12 个代码搜索请求；在 Github/Gitlab 等仓库托管服务中，搜索是工程师最常用的功能之一。&quot;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/blog/tags/system-design/"/>
    
  </entry>
  
  <entry>
    <title>调用链追踪系统在伴鱼：实践篇</title>
    <link href="https://zhenghe-md.github.io/blog/2021/03/04/implementing-tail-based-sampling/"/>
    <id>https://zhenghe-md.github.io/blog/2021/03/04/implementing-tail-based-sampling/</id>
    <published>2021-03-04T17:03:51.000Z</published>
    <updated>2022-10-09T13:16:52.289Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文同时发表在&lt;a href=&quot;https://tech.ipalfish.com/blog/2021/03/04/implementing-tail-based-sampling/&quot;&gt;伴鱼技术博客&lt;/a&gt;上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;a href=&quot;https://zhenghe-md.github.io/blog/2020/12/20/design-dimensions-of-tracing-systems/&quot;&gt;理论篇&lt;/a&gt; 中，我们介绍了伴鱼在调用链追踪领域的调研工作，本篇继续介绍伴鱼的调用链追踪实践。在正式介绍前，简单交代一下背景：2015 年，在伴鱼服务端起步之时，技术团队就做出统一使用 Go 语言的决定。这个决定的影响主要体现在：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;内部基础设施无需做跨语言支持&lt;/li&gt;
&lt;li&gt;技术选型会有轻微的语言倾向&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/blog/categories/system-design/"/>
    
    
  </entry>
  
  <entry>
    <title>调用链追踪系统的设计维度</title>
    <link href="https://zhenghe-md.github.io/blog/2020/12/20/design-dimensions-of-tracing-systems/"/>
    <id>https://zhenghe-md.github.io/blog/2020/12/20/design-dimensions-of-tracing-systems/</id>
    <published>2020-12-20T23:03:14.000Z</published>
    <updated>2022-10-09T13:16:52.269Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文将调用链追踪系统的设计维度归结于以下 5 个：调用链数据模型、元数据结构、因果关系、采样策略以及数据可视化。我们可以把这 5 个维度当作一个分析框架，用它帮助我们在理论上解构市面上任意一个调用链追踪系统，在实践中根据使用场景进行技术选型和系统设计。如果你对调研相关系统很感兴趣，也欢迎参与到 &lt;a href=&quot;https://github.com/ZhengHe-MD/database-of-tracing-systems&quot;&gt;Database of Tracing Systems&lt;/a&gt; 项目中，一起调研市面上的项目，建立起调用链追踪系统的数据库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/blog/categories/system-design/"/>
    
    
      <category term="distributed tracing" scheme="https://zhenghe-md.github.io/blog/tags/distributed-tracing/"/>
    
      <category term="distributed system" scheme="https://zhenghe-md.github.io/blog/tags/distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>So, you want to trace your distributed system? Key design insights from years of practical experience (2014)</title>
    <link href="https://zhenghe-md.github.io/blog/2020/11/29/so-you-want-to-trace-your-distributed-system-key-design-insights-from-years-of-practical-experience/"/>
    <id>https://zhenghe-md.github.io/blog/2020/11/29/so-you-want-to-trace-your-distributed-system-key-design-insights-from-years-of-practical-experience/</id>
    <published>2020-11-29T21:28:32.000Z</published>
    <updated>2022-10-09T13:16:52.309Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍一篇关于调用链追踪系统设计的论文。行文会尊从原论文的结构，但不是逐字翻译，以意译和加入个人理解的转述为主。&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;如果把公司内部所有 IT 系统看作一个巨型分布式系统，通常其规模庞大、结构复杂，且拥有多层依赖和抽象，每层单拎出来也同样是个分布式系统。以 Google 的业务服务为例，如搜索、广告，会构建于内部基础服务之上，如 Bigtable；而 BigTable 又构建于 Google File System (GFS) 和 Chubby 之上。即便是业务服务本身，也可能存在多层 (multiple tiers) 结构，其中每层同样支持横向扩展。从巨石应用走向微服务，我们在组织架构和服务架构上都变得高效，但其代价就是下降的系统可观测性 (observability)。一个很现实的问题就是：几乎不存在一位工程师能够了解系统全貌，那么问题排查也将变得困难。从单机走向分布式，只关心单个进程、单台机器的性能指标已经远远不够，我们需要将监控的重心从以机器为中心 (machine-centric) 转向以流程为中心 (workflow-centric)，后者的核心方法便是调用链追踪系统。分布式系统的终极理想可以描述为：在获得横向扩展性的同时不暴露自己分布式的本质，即向外提供与单机系统相同的体验。调用链追踪系统概莫能外。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;按：原文将请求处理过程称为 workflow，下文会使用流程和请求来指代它；原文将以流程为中心的观测方法统称为 end-to-end tracing，由于现在分布式系统几乎是所有讨论的默认假设，本文将不再强调 end-to-end，将其直接译为调用链追踪。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;尽管大家对调用链追踪的兴趣浓厚，但关于如何设计一个调用链追踪系统，市面上、社区中提供的信息十分有限。更令人担忧的是，现存的文献和实践都将调用链追踪当作多种场景的万能解决方案 (one-size-fits-all)，然而我们以及 Dapper 的实践经验证明事实并非如此。因此在提出你的解决方案之前，最好明确你想要解决的问题是什么。&lt;/p&gt;
&lt;p&gt;调用链追踪的基本原理和概念十分通俗易懂：就是在系统中的各个节点 (组件) 上埋点，当请求经过时将节点信息 (trace point) 上报，最后汇总信息重建调用链。我们从经验中总结了调用链追踪系统的 4 个设计维度，通过组合这些设计维度的选择就能得到不同应用场景的解决方案：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;which causal relationships should be preserved: 保留什么样的因果关系？&lt;/li&gt;
&lt;li&gt;how causal relationships are tracked: 如何追踪因果关系？&lt;/li&gt;
&lt;li&gt;how to reduce overhead by sampling: 如何通过采样降低成本？&lt;/li&gt;
&lt;li&gt;how end-to-end traces should be visualized: 如何将追踪的结果可视化？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果对这 4 个设计维度以及它们之间的权衡关系没有足够的理解，设计一个调用链追踪系统将可能让实现与场景脱节。事实上，由于这些维度之前并未被实践者或研究者提出和充分理解，许多调用链追踪系统的实现并未能充分达成其设计理想。&lt;/p&gt;
&lt;h1 id=&quot;backgroud&quot;&gt;2. Backgroud&lt;/h1&gt;
&lt;p&gt;本节主要陈述一些调用链追踪系统的背景信息，包括核心应用场景、解决方案分类以及本文所推崇的架构方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/blog/categories/papers-we-love/"/>
    
    
      <category term="distributed tracing" scheme="https://zhenghe-md.github.io/blog/tags/distributed-tracing/"/>
    
      <category term="distributed system" scheme="https://zhenghe-md.github.io/blog/tags/distributed-system/"/>
    
      <category term="system design" scheme="https://zhenghe-md.github.io/blog/tags/system-design/"/>
    
  </entry>
  
  <entry>
    <title>Go 项目中 error handling 的世界观和方法论</title>
    <link href="https://zhenghe-md.github.io/blog/2020/10/05/Go-Error-Handling-Research/"/>
    <id>https://zhenghe-md.github.io/blog/2020/10/05/Go-Error-Handling-Research/</id>
    <published>2020-10-05T16:20:00.000Z</published>
    <updated>2022-10-09T13:16:52.229Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;自从 2018 年底用 Go 搭建第一个项目以来，已经过去接近 2 年时间，我发现自己从未系统地思考过 Go 的 error handling 方案。最近在阅读 [1] 时，逐渐发现个人和团队都应该花更多的精力建立更加扎实的工程实践方法论，进一步提升交付项目质量。而本篇博客算是向这个方向迈出的第一步。&lt;/p&gt;
    
    </summary>
    
    
      <category term="engineering" scheme="https://zhenghe-md.github.io/blog/categories/engineering/"/>
    
    
      <category term="Go" scheme="https://zhenghe-md.github.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>TiDB 为什么要用 Apache Arrow - 一个门外汉的思考</title>
    <link href="https://zhenghe-md.github.io/blog/2020/09/20/apache-arrow-summary/"/>
    <id>https://zhenghe-md.github.io/blog/2020/09/20/apache-arrow-summary/</id>
    <published>2020-09-20T21:14:48.000Z</published>
    <updated>2022-10-09T13:16:52.265Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在阅读 TiDB 源码 util/chunk package 的过程中，看到了 Apache Arrow 这个项目 (下文简称 Arrow)：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Chunk stores multiple rows of data in Apache Arrow format.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// See https://arrow.apache.org/docs/format/Columnar.html#physical-memory-layout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Values are appended in compact format and can be directly accessed without decoding.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// When the chunk is done processing, we can reuse the allocated memory by resetting it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Chunk &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;心里自然而然会产生疑问：为什么要使用这个项目规定的数据存储格式？于是在阅读完 TiDB 相关源码和单测后，顺便搜寻并浏览一些有趣的资料 (见文末参考部分)，现在将这次调研的收获小结在这篇博客中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/blog/categories/system-design/"/>
    
    
      <category term="database" scheme="https://zhenghe-md.github.io/blog/tags/database/"/>
    
  </entry>
  
</feed>
